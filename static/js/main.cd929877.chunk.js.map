{"version":3,"sources":["components/SyncClass.tsx","components/SyncHook.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SyncClass","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counter","increase","console","log","setState","decrease","react_default","a","createElement","className","onClick","parentCounter","Component","SyncHook","_useState","useState","_useState2","slicedToArray","setCounter","useEffect","c","AsyncClass","Loadable","loader","__webpack_require__","e","then","bind","loading","AsyncHook","routes","to","label","App","_this2","map","n","key","react_router_dom","react_router","path","render","components_SyncClass","components_SyncHook","Boolean","window","location","hostname","match","basename","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd929877.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { ParentProps } from './interface'\n// import { showDivider } from './utils'\n\nclass SyncClass extends Component<ParentProps> {\n  constructor (props: ParentProps) {\n    super(props)\n\n    // console.log('================')\n    console.log('SyncClass Constructor')\n  }\n\n  state = {\n    counter: 0\n  }\n\n  increase = () => {\n    console.log('================')\n    this.setState({ counter: this.state.counter + 1})\n  }\n\n  decrease = () => {\n    console.log('================')\n    this.setState({ counter: this.state.counter - 1})\n  }\n\n  static getDerivedStateFromProps () {\n    console.log('SyncClass getDerivedStateFromProps')\n    return null\n  }\n\n  getSnapshotBeforeUpdate () {\n    console.log('SyncClass getSnapshotBeforeUpdate')\n    return null\n  }\n\n  componentDidUpdate () {\n    console.log('SyncClass didUpdate')\n  }\n\n  componentDidMount () {\n    console.log('SyncClass didMount')\n  }\n\n  componentWillUnmount () {\n    console.log('SyncClass willUnmount')\n  }\n\n  render () {\n    console.log('SyncClass render')\n\n    return (\n      <div className='sync-class'>\n        <div>\n          <span>SyncClass: </span>\n          <button onClick={this.increase}>+</button>\n          <span>{this.props.parentCounter} - {this.state.counter}</span>\n          <button onClick={this.decrease}>-</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SyncClass\n","import React, { useState, useEffect } from 'react'\nimport { ParentProps } from './interface'\n// import { showDivider } from './utils'\n\nconst SyncHook = (props: ParentProps) => {\n  const { parentCounter } = props\n  const [counter, setCounter] = useState(0)\n\n  useEffect(() => {\n    console.log('SyncHook Effect (with-deps)')\n\n    return () => {\n      console.log('SyncHook Effect (with-deps / cleanup)')\n    }\n  }, [counter, parentCounter])\n\n  useEffect(() => {\n    // console.log('================')\n    console.log('SyncHook Effect (no-deps)')\n\n    return () => {\n      console.log('SyncHook Effect (no-deps / cleanup)')\n    }\n  }, [])\n\n  function increase () {\n    console.log('================')\n    setCounter(c => c + 1)\n  }\n\n  function decrease () {\n    console.log('================')\n    setCounter(c => c - 1)\n  }\n\n  console.log('SyncHook render')\n\n  return (\n    <div className='sync-hook'>\n      <div>\n        <span>SyncHook: </span>\n        <button onClick={increase}>+</button>\n        <span>{parentCounter} - {counter}</span>\n        <button onClick={decrease}>-</button>\n      </div>\n    </div>\n  )\n}\n\nexport default SyncHook\n","import React, { Component } from 'react'\nimport Loadable from 'react-loadable'\nimport { Switch, Route, NavLink} from 'react-router-dom'\nimport './App.scss'\nimport SyncClass from './components/SyncClass'\nimport SyncHook from './components/SyncHook'\n// import { showDivider } from './components/utils'\n\nconst AsyncClass = Loadable({\n  loader: () => import('./components/AsyncClass'),\n  loading: () => null\n})\nconst AsyncHook = Loadable({\n  loader: () => import('./components/AsyncHook'),\n  loading: () => null\n})\n\nconst routes = [\n  { to: '/', label: 'Home' },\n  { to: '/sync-class', label: 'Sync Class' },\n  { to: '/sync-hook', label: 'Sync Hook' },\n  { to: '/async-class', label: 'Async Class' },\n  { to: '/async-hook', label: 'Async Hook' }\n]\n\nclass App extends Component {\n  constructor (props: any) {\n    super(props)\n\n    // console.log('================')\n    console.log('Parent Constructor')\n  }\n\n  state = {\n    counter: 0\n  }\n\n  increase = () => {\n    console.log('================')\n    this.setState({ counter: this.state.counter + 1})\n  }\n\n  decrease = () => {\n    console.log('================')\n    this.setState({ counter: this.state.counter - 1})\n  }\n\n  static getDerivedStateFromProps () {\n    // console.log('================')\n    console.log('Parent getDerivedStateFromProps')\n    return null\n  }\n\n  getSnapshotBeforeUpdate () {\n    console.log('Parent getSnapshotBeforeUpdate')\n    return null\n  }\n\n  componentDidUpdate () {\n    console.log('Parent didUpdate')\n  }\n\n  componentDidMount () {\n    console.log('Parent didMount')\n\n    // document.addEventListener('click', showDivider)\n  }\n\n  componentWillUnmount () {\n    console.log('Parent willUnmount')\n\n    // document.removeEventListener('click', showDivider)\n  }\n\n  render () {\n    console.log('Parent render')\n\n    return (\n      <div className='App'>\n        <nav>\n          <ul>\n            { routes.map(n => (\n              <li key={n.to} onClick={() => { console.log('================') }}>\n                <NavLink to={n.to}>{n.label}</NavLink>\n              </li>\n            )) }\n          </ul>\n        </nav>\n\n        <div>\n          <span>Parent: </span>\n          <button onClick={this.increase}>+</button>\n          <span>{this.state.counter}</span>\n          <button onClick={this.decrease}>-</button>\n        </div>\n\n        {/* <SyncClass /> */}\n        {/* <SyncHook /> */}\n\n        <hr />\n\n        <Switch>\n          <Route path='/sync-class' render={props => <SyncClass parentCounter={this.state.counter} />} />\n          <Route path='/sync-hook' render={props => <SyncHook parentCounter={this.state.counter} />} />\n          <Route path='/async-class' render={props => <AsyncClass parentCounter={this.state.counter} />} />\n          <Route path='/async-hook' render={props => <AsyncHook parentCounter={this.state.counter} />} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { HashRouter as Router, Route} from 'react-router-dom'\nimport './index.scss'\nimport App from './App'\nimport { unregister } from './serviceWorker'\n\nrender(\n  <Router basename={''}>\n    <Route path='/' component={App} />\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nunregister()\n"],"sourceRoot":""}